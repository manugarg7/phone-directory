{"version":3,"sources":["serviceWorker.js","Header.js","ShowSubscribers.js","AddSubscriber.js","PhoneDirectory.js","index.js"],"names":["isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","onUpdate","onSuccess","catch","error","Header","props","className","heading","ShowSubscribers","Component","this","subscribersList","map","sub","key","id","name","phone","PhoneDirectory","addSubscriberHandler","newSubscriber","length","push","setState","ReactDOM","render","document","getElementById","URL","process","href","origin","addEventListener","fetch","response","contentType","headers","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"wSAYMA,G,MAAcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,4DAsCN,SAASC,EAAgBC,EAAOC,GAC9BC,UAAUC,cACPC,SAASJ,GACTK,MAAK,SAAAC,GACJA,EAAaC,cAAgB,WAC3B,IAAMC,EAAmBF,EAAaG,WACd,MAApBD,IAGJA,EAAiBE,cAAgB,WACA,cAA3BF,EAAiBG,QACfT,UAAUC,cAAcS,YAI1BC,QAAQC,IACN,iHAKEb,GAAUA,EAAOc,UACnBd,EAAOc,SAAST,KAMlBO,QAAQC,IAAI,sCAGRb,GAAUA,EAAOe,WACnBf,EAAOe,UAAUV,WAO5BW,OAAM,SAAAC,GACLL,QAAQK,MAAM,4CAA6CA,M,uCCpFlDC,G,MATA,SAAUC,GAErB,OACI,yBAAKC,UAAU,UACVD,EAAME,WC6BJC,G,MChCcC,Y,6LDI3B,OACF,6BACA,kBAAC,EAAD,CAAQF,QAAQ,oBACR,yBAAKD,UAAU,4BACb,4BAAQA,UAAU,sBAAlB,OAEA,yBAAKA,UAAU,oCACb,0BAAMA,UAAU,0BAAhB,QACA,0BAAMA,UAAU,2BAAhB,UAIII,KAAKL,MAAMM,gBAAgBC,KAAI,SAAAC,GACjC,OAAO,yBAAKC,IAAKD,EAAIE,GAAIT,UAAU,kBACjC,0BAAMA,UAAU,aAAaO,EAAIG,MACjC,0BAAMV,UAAU,aAAaO,EAAII,OACjC,0BAAMX,UAAU,kCACd,4BAAQA,UAAU,yBAAlB,qB,GArBYG,cEuCfS,E,YArCX,aAAe,IAAD,8BACV,+CAiBJC,qBAAuB,SAACC,GACpB,IAAIT,EAAkB,EAAKf,MAAMe,gBAC7BA,EAAgBU,OAAS,EACzBD,EAAcL,GAAKJ,EAAgBA,EAAgBU,OAAS,GAAGN,GAAK,EAEpEK,EAAcL,GAAK,EAEvBJ,EAAgBW,KAAKF,GACrB,EAAKG,SAAS,CAAEZ,gBAAiBA,KAxBjC,EAAKf,MAAQ,CACTe,gBAAiB,CACb,CACII,GAAI,EACJC,KAAM,cACNC,MAAO,cAEX,CACIF,GAAI,EACJC,KAAM,gBACNC,MAAO,gBAZT,E,sEA8BV,OAEI,kBAAC,EAAD,CAAiBN,gBAAiBD,KAAKd,MAAMe,sB,GAlC5BF,aCI7Be,IAASC,OAAO,kBAAC,EAAD,MAAoBC,SAASC,eAAe,SLcrD,SAAkBzC,GACvB,GAA6C,kBAAmBC,UAAW,CAGzE,GADkB,IAAIyC,IAAIC,mBAAwBjD,OAAOC,SAASiD,MACpDC,SAAWnD,OAAOC,SAASkD,OAIvC,OAGFnD,OAAOoD,iBAAiB,QAAQ,WAC9B,IAAM/C,EAAK,UAAM4C,mBAAN,sBAEPnD,IAgEV,SAAiCO,EAAOC,GAEtC+C,MAAMhD,GACHK,MAAK,SAAA4C,GAEJ,IAAMC,EAAcD,EAASE,QAAQC,IAAI,gBAEnB,MAApBH,EAASI,QACO,MAAfH,IAA8D,IAAvCA,EAAYI,QAAQ,cAG5CpD,UAAUC,cAAcoD,MAAMlD,MAAK,SAAAC,GACjCA,EAAakD,aAAanD,MAAK,WAC7BV,OAAOC,SAAS6D,eAKpB1D,EAAgBC,EAAOC,MAG1BgB,OAAM,WACLJ,QAAQC,IACN,oEArFA4C,CAAwB1D,EAAOC,GAI/BC,UAAUC,cAAcoD,MAAMlD,MAAK,WACjCQ,QAAQC,IACN,iHAMJf,EAAgBC,EAAOC,OKrC/BE,K","file":"static/js/main.7fe5646c.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\r\nimport './Header.css';\r\n\r\nconst Header = function (props) {\r\n\r\n    return (\r\n        <div className=\"header\">\r\n            {props.heading}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Header;","import React, { Component } from 'react';\nimport Header from './Header.js';\nimport './ShowSubscribers.css';\n\nclass ShowSubscribers extends Component {\n\n  render() {\n\n  return (\n<div>\n<Header heading=\"Phone Directory\" />\n        <div className=\"component-body-container\">\n          <button className=\"custom-btn add-btn\">Add</button>\n\n          <div className=\"grid-container heading-container\">\n            <span className=\"grid-item name-heading\">Name</span>\n            <span className=\"grid-item phone-heading\">Phone</span>\n          </div>\n\n          {\n                this.props.subscribersList.map(sub => {\n              return <div key={sub.id} className=\"grid-container\">\n                <span className=\"grid-item\">{sub.name}</span>\n                <span className=\"grid-item\">{sub.phone}</span>\n                <span className=\"grid-item action-btn-container\">\n                  <button className=\"custom-btn delete-btn\">Delete</button>\n                </span>\n              </div>\n            })\n          }\n        </div>\n    </div>\n  );\n}\n}\n\nexport default ShowSubscribers;\n","import React, { Component } from 'react';\r\nimport Header from './Header';\r\nimport './AddSubscriber.css';\r\n\r\nclass AddSusbscriber extends Component {\r\n\r\n    constructor() {\r\n        super();\r\n        this.state = {\r\n            id: 0,\r\n            name: '',\r\n            phone: ''\r\n        }\r\n    }\r\n\r\n    inputChangedHandler = (e) => {\r\n        const state = this.state;\r\n        state[e.target.name] = e.target.value;\r\n        this.setState(state);\r\n    }\r\n    onFormSubmitted = (e) => {\r\n        e.preventDefault();\r\n        this.props.addSubscriberHandler(this.state);\r\n        this.setState({ id: 0, name: '', phone: ' ' });\r\n    }\r\n\r\n\r\n    render() {\r\n        \r\n        const { name, phone } = this.state;\r\n\r\n        return (\r\n            <div>\r\n                <Header heading=\"Add Subscriber\" />\r\n                <div className=\"component-body-container\">\r\n                    <button className=\"custom-btn\">Back</button>\r\n\r\n                    <form className=\"subscriber-form\" onSubmit={this.onFormSubmitted.bind(this)}>\r\n                        <label htmlFor=\"name\" className=\"label-control\">Name: </label><br />\r\n                        <input id=\"name\" type=\"text\" className=\"input-control\" name=\"name\" onChange={this.inputChangedHandler} /><br /><br />\r\n                        <label htmlFor=\"phone\" className=\"label-control\">Phone: </label><br />\r\n                        <input id=\"phone\" type=\"text\" className=\"input-control\" name=\"phone\" onChange={this.inputChangedHandler} /><br /><br />\r\n                        <div className=\"subscriber-info-container\">\r\n                        <span className=\"subscriber-to-add-heading\">Subscriber to be added: </span><br />\r\n                            <span className=\"subscriber-info\">Name: {name}</span><br />\r\n                            <span className=\"subscriber-info\">Phone: {phone}</span><br />\r\n                        </div>\r\n\r\n                        <button type=\"submit\" className=\"custom-btn add-btn\">Add</button>\r\n                    </form>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\n\r\nexport default AddSusbscriber;","import React, { Component } from 'react';\r\nimport AddSubscriber from './AddSubscriber';\r\nimport ShowSubscribers from './ShowSubscribers';\r\n\r\nclass PhoneDirectory extends Component {\r\n\r\n    constructor() {\r\n        super();\r\n        this.state = {\r\n            subscribersList: [\r\n                {\r\n                    id: 1,\r\n                    name: \"Shilpa Bhat\",\r\n                    phone: \"9999999999\"\r\n                },\r\n                {\r\n                    id: 2,\r\n                    name: \"Srishti Gupta\",\r\n                    phone: \"8888888888\"\r\n                }\r\n            ]\r\n        }\r\n    }\r\n\r\n    addSubscriberHandler = (newSubscriber) => {\r\n        let subscribersList = this.state.subscribersList;\r\n        if (subscribersList.length > 0) {\r\n            newSubscriber.id = subscribersList[subscribersList.length - 1].id + 1;\r\n        } else {\r\n            newSubscriber.id = 1;\r\n        }\r\n        subscribersList.push(newSubscriber);\r\n        this.setState({ subscribersList: subscribersList });\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            // <AddSubscriber addSubscriberHandler={this.addSubscriberHandler} />\r\n            <ShowSubscribers subscribersList={this.state.subscribersList} />\r\n        )\r\n    }\r\n}\r\n\r\nexport default PhoneDirectory;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport * as serviceWorker from './serviceWorker';\nimport AddSusbscriber from './AddSubscriber';\nimport './common/common.css';\nimport PhoneDirectory from './PhoneDirectory';\n\nReactDOM.render(<PhoneDirectory />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();"],"sourceRoot":""}